---
  title: Parachutes in silico
  kind: article
  created_at: 2011-03-07
---

There was a [recent blog post on leaving academia by Massimo Sandal][quitting].
I found reading this article emotive and made me feel a little uncomfortable.
The constant feeling of needing to publish leads to continuous feeling of being
under pressure. This is something I have acutely felt since starting my post-PhD
career. 

Working in academia can sometimes feel like a way of life rather than a job.
This can make leaving academia a very personal decision because it's not just
changing your 9-5, it's also the 7-9 after dinner, it's thinking about problems
in bed, it's also getting ideas in the shower. I think you basically carry
academia around in your head most times of the day.

Having said that I think the decision to leave academia and then to describe
the feelings about this online are both brave decisions. I think if you leave
academia having worked as a bioinformatician leaves you in a better position
than most when looking for another job. Or as another perspective - picking
learning a the right contemporary skills as a bioinformatician academia can pay
off if things don't quite turn out the way you planned.

### Programming

I think knowing how to write software sets a computational biologist apart from
a wet-lab biologist. A recent [blog post suggests that developers are in demand
for web start-ups][shortage]. This post is however specific to the Ruby
language, [and in 2008 Perl was the most popular language among a sample
bioinformaticians][popular]. Nevertheless, if you know one language it's much
easier to learn a second.

I moved from the Java language to the Ruby halfway during my PhD. One of the
things I feel I've improved from learning Ruby is a strong foundation for
test-driven software development. This translates as writing tests for how your
software should behave before writing the software itself. Working as an
academic bioinformatician there is often scope for solving scientific problems
using the languages and frameworks that suit you. Therefore its possible and
I think very worthwhile continually improve yourself as a developer and to push
yourself to solve problems in ways you wouldn't normally consider.

Learning new skills such as [integration testing][integration], a [version
control system like git][git], or [a customisable editor like vim][vim] can
make you more productive as a developer but are also useful additions to your
CV or resume. The best way to [become a better programmer is to program
something][better] and having an open-source portfolio may get you a job at
interesting companies [who hire people that write interesting tools][hiring] .

### Data Analysis

I think being able to store, manipulate and analyse data, big or small, can
really set a bioinformatician apart and make them attractive to employers. The
ability to program and use the command line are useful but deriving meaning
from meaning from data is exceptional. Classical statistics can estimate if two
groups of data are significantly different within a given confidence interval.
Regression can discriminate which are the important factors in the trend you're
seeing in your data. Then there is Bayes's rule and the corresponding methods
for inference derived from it. Bayesian statistics provides a formal frame work
for inferring the probability of variables and updating beliefs given the data
observed and prior expectations.

This is just a small example of bioinformatics data skills that will always be
useful. Common tools that we take for granted such as building a multiple
sequence alignment, creating a phylogenetic tree, or assembling a genome
sequence are all based on finding the probabilistic solution to the problem.
This means there is not necessarily a right answer when the number of possible
solutions is very large. Instead you search for the most correct solution and
evaluate if for a calculated score for that answer. Maximum likelihood
estimators or Bayesian MCMC may not be common approaches outside of
bioinformatics, but these conceptually simple algorithms are extremely useful
however where you want to search the parameter space of a large data set for
the most likely answer.

### Summary

Work on what you're passionate about because the dots can connect themselves.

-- Steve Jobs talk

[quitting]: http://blog.devicerandom.org/2011/02/18/getting-a-life/
[reaction]: http://blog.devicerandom.org/2011/02/22/goodbye-aftermath/
[shortage]: http://robots.thoughtbot.com/post/3310910483/a-shortage
[popular]: http://openwetware.org/wiki/Image:Most_Popular_Bioinformatics_Programming_Languages.png
[integration]: http://en.wikipedia.org/wiki/Integration_testing
[git]: http://www.bioinformaticszen.com/tools/git/
[vim]: http://www.bioinformaticszen.com/tools/vim/
[better]: http://stackoverflow.com/questions/82639/how-to-become-a-better-programmer
[hiring]: https://gist.github.com/6443
[clever-algorithms]: http://www.cleveralgorithms.com/
